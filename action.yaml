name: Sync branch action
author: Bancolombia
description: >
  Automates branch homologation and pull request creation with automatic conflict resolution
branding:
  icon: "git-merge"
  color: "orange"

inputs:
  github_token:
    description: 'GitHub token with permissions to create branches and PRs.'
    required: true
  ours_files_list:
    description: 'Path to the file listing files to resolve as "ours" during conflicts.'
    required: false
    default: '.github/merge_ours_files.txt'
  user_name:
    description: 'Git username for commit history.'
    required: true
  user_email:
    description: 'Git user email for commit history.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github_token }}
        ref: ${{ github.ref_name }}
        fetch-depth: 0

    - name: Create labels if not exist
      run: |
        gh label create "automated-pr" --color "f1c232" --description "Branch homologation PR" || echo "Label 'automated-pr' already exists"
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Setup git config
      run: |
        git config user.name ${{ inputs.user_name }}
        git config user.email ${{ inputs.user_email }}
      shell: bash

    - name: Get PullRequest Message
      run: |
        MERGE_COMMIT_SHA="${{ github.event.pull_request.merge_commit_sha }}"
        COMMIT_MESSAGE=$(git log -1 --pretty=%B $MERGE_COMMIT_SHA)
        echo "Mensaje del commit: $COMMIT_MESSAGE"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
      shell: bash

    - name: Get first branch and second branch
      run: |
        # Extraer el contenido entre < >
        contenido=$(echo "$COMMIT_MESSAGE" | grep -oE '<[^>]+>' | sed 's/[<>]//g')

        # Separar por el sÃ­mbolo &
        if [[ "$contenido" == *"&"* ]]; then
          firstBranch=$(echo "$contenido" | cut -d'&' -f1)
          secondBranch=$(echo "$contenido" | cut -d'&' -f2)
        else
          firstBranch="$contenido"
          secondBranch=""
        fi

        echo "firstBranch: $firstBranch"
        echo "secondBranch: $secondBranch"


        if [ -n "$firstBranch" ]; then
            echo "Existe primera rama para homologar"
            echo "BASE_BRANCH=$firstBranch" >> $GITHUB_ENV
        else
            echo "No existe primera rama para homologar"
            exit 1
        fi

        if [ -n "$secondBranch" ]; then
            echo "Existe segunda rama para homologar"
            echo "SECOND_BRANCH=$secondBranch" >> $GITHUB_ENV
        else
            echo "No existe segunda rama para homologar"
        fi
      shell: bash

    - name: Create Pull Request for the first branch
      run: |
        .github/scripts/create_pr.sh
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        SOURCE_BRANCH: ${{ github.ref_name }}
        BASE_BRANCH: ${{ env.BASE_BRANCH }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        OURS_FILES_LIST: ${{ inputs.ours_files_list }}
        SYNC_BRANCH: 'feature/${{ github.ref_name }}-to-${{ env.BASE_BRANCH }}'

    - name: Create Pull Request for the second branch
      if: ${{ env.SECOND_BRANCH }}
      run: |
        .github/scripts/create_pr.sh
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        SOURCE_BRANCH: ${{ github.ref_name }}
        BASE_BRANCH: ${{ env.SECOND_BRANCH }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        OURS_FILES_LIST: ${{ inputs.ours_files_list }}
        SYNC_BRANCH: 'feature/${{ github.ref_name }}-to-${{ env.SECOND_BRANCH }}'







